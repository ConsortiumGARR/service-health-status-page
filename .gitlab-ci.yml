stages:          # List of stages for jobs, and their order of execution
  - test
  - package
  - deploy


unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  tags: [shared]
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 1
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  tags: [shared]
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 1
    - echo "No lint issues found."

package:
  stage: package
  tags: [shared]
  image: docker:latest
  only:
    - master
    - development
  services:
    - docker:dind
  before_script:
    - version=latest
    - echo $version
    - echo $CI_COMMIT_REF_NAME
    - uname -a
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - (if [ "$CI_COMMIT_REF_NAME" == "development" ]; then docker build -t $CI_REGISTRY_IMAGE:dev-latest -t $CI_REGISTRY_IMAGE:dev-$CI_COMMIT_SHA . ; else docker build -t $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA . ; fi);
    - docker push --all-tags $CI_REGISTRY_IMAGE

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  tags: [shared]
  only:
    - master
    - development
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  services:
    - docker:dind
  before_script:
    - (if [ "$CI_COMMIT_REF_NAME" == "development" ]; then IMAGE_TAG=dev-$CI_COMMIT_SHA ; else IMAGE_TAG=$CI_COMMIT_SHA ; fi);
    - (if [ "$CI_COMMIT_REF_NAME" == "development" ]; then SERVER=$SERVER_DEV ; else SERVER=$SERVER_PROD ; fi);
    - (if [ "$CI_COMMIT_REF_NAME" == "development" ]; then CERTIFICATE_AUTHORITY_DATA=$CAD_DEV ; else CERTIFICATE_AUTHORITY_DATA=$CAD_PROD ; fi);
    - (if [ "$CI_COMMIT_REF_NAME" == "development" ]; then USER_TOKEN=$USER_TOKEN_DEV ; else USER_TOKEN=$USER_TOKEN_PROD ; fi);
    - uname -a
  script:
    - echo "Deploying application..."
    - uname -a
    - kubectl config set-cluster neanias-k8s --server="${SERVER}"
    - kubectl config set clusters.neanias-k8s.certificate-authority-data ${CERTIFICATE_AUTHORITY_DATA}
    - kubectl config set-credentials gitlab --token="${USER_TOKEN}"
    - kubectl config set-context default --cluster=neanias-k8s --user=neanias-ci-status-page
    - kubectl config use-context default    
    - kubectl --kubeconfig service-accout-kubeconfig set image deployment neanias-status-page neanias-status-page=gitlab.neanias.eu:5050/monitoring-neanias/status-page:$IMAGE_TAG
